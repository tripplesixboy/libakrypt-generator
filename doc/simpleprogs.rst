Первые шаги
===========


Есть ли базовый шаблон программы?
---------------------------------

Программа, использующая библиотеку ``libakrypt``,
должна в обязательном порядке выполнить три простых действия:

* с помощью директивы ``#include<libakrypt.h>`` подключить заголовочный файл бибилиотеки,
* иициализировать библиотеку с помощью функии :func:`ak_libakrypt_create()`,
* после окончания криптографических преобразований выполнить функцию :func:`ak_libakrypt_destroy()`.

Базовый шаблон программы выглядит следующим образом (файл ``example-g01n01.c``).

.. literalinclude:: ../examples/faq/example-g01n01.c
 :language: c
 :linenos:


Как собрать программу в консоли Linux?
--------------------------------------

Для сборки приведенной выше программы достаточно выполнить в консоли следующую команду::

    gcc example-g01n01.c -o example -lakrypt-base -lakrypt


Что такое аудит и как им пользоваться?
--------------------------------------

Аудит -- это вывод сообщений об ошибках и штатных действиях программы.
К аудиту, в частности, относится вывод информации о
вводе и смене ключей, изменении прав доступа, результаты об удаленной аутентификации пользователей и т.п.

Все сообщения библиотеки могут быть разделены на три уровня:

- первый уровень аудита определяется константой ``ak_log_none``, на этом уровне выводятся
  только сообщения об ошибках;
- второй уровень аудита определяется константой ``ak_log_standard``, на этом уровне
  выводятся сообщения об ошибках, а также сообщения, регламентируемые действующей нормативной базой,
  см. рекомендации Р 1323565.1.012-2017;
- третий (максимальный) уровень аудита определяется константой ``ak_log_maximum``,
  на этом уровне выводятся все сообщения, доступные на первых двух уровнях, а также
  сообщения отладочного характера, позволяющие проследить логику работы функций библиотеки.

Пользователь может настраивать уровень аудита,
определять собственную функцию вывода сообщений, а также выводить собственные сообщения.

В следущем примере пользователем устанавливается максимальный уровень аудита и
определяется собственная функция для вывода сообщений (файл ``example-g01n02.c``).

.. literalinclude:: ../examples/faq/example-g01n02.c
 :language: c
 :linenos:

В случае, когда аргумент функции :func:`ak_libakrypt_create` принимает значение ``NULL``,
то используется функция аудита, установленная по-умолчанию.
Для этого в библиотеке реализованы две стандартные функции:

- функция :func:`ak_function_log_stderr` реализует вывод в стандартный поток вывода ошибок
  и используется по-умолчанию в ОС `Windows`,
- функция :func:`ak_function_log_syslog` реализует вывод и использованием демона
  `syslog <https://en.wikipedia.org/wiki/Syslog>`__ и используется по-умолчанию в Unix-системах.


Пользователь может выводить собственные сообщения, используя механизмы библиотеки `libakrypt`.
Для вывода сообщений необходимо использовать функции :func:`ak_error_message`
или :func:`ak_error_message_fmt`, которые формируют строку с сообщением специального вида и
выводят данную строку с использованием установленной выше функции.

Пример такого вывода
иллюстрируется следующим примером (файл ``example-g01n03.c``).

.. literalinclude:: ../examples/faq/example-g01n03.c
 :language: c
 :linenos:


Как скомпилировать сразу все примеры, приведенные в FAQ?
--------------------------------------------------------

Для автоматизированной сборки всех примеров,
приведенных в этом и последующих разделах FAQ,
перед вызовом `make` необходимо выполнить команду сборки `cmake` со следующими аргументами::

    cmake -DAK_EXAPMLES=ON ../libakrypt-0.x

Детальное описание всех флагов команды `cmake` можно найти в
соответствующем `разделе <install-guide.html>`__ документации.

