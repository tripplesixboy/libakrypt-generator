Введение
========

После сборки и установки библиотеки ``libakrypt``,
в основное дерево заголовочных файлов будут добавлены два файла:

 - ``libakrypt-base.h`` - файл, содержащий платформо-зависимые определения;
 - ``libakrypt.h`` - файл, содержащий определения основных типов,
   структур данных и экспортируемых функций.

.. note::

 При использовании операционной системы Windows Вам надо скопировать эти файлы вручную.

Для сборки прикладных программ достаточно подключения только последнего файла,
т.е. выполнения следующей директивы.

.. code:: c

  #include <libakrypt.h>

Помимо подключения заголовочного файла,
программа, использующая библиотеку ``libakrypt``, должна в обязательном порядке
выполнить два простых действия:

 - иициализировать библиотеку с помощью функии :func:`ak_libakrypt_create()`,
 - после окончания криптографических преобразований выполнить
   функцию :func:`ak_libakrypt_destroy()`.

Базовый шаблон программы выглядит следующим образом
(файл `example-g01n01.c <_static/example-g01n01.c>`__).

.. literalinclude:: ../examples/faq/example-g01n01.c
 :language: c
 :linenos:


Сборка прикладной программы в консоли
-------------------------------------

Для сборки приведенной выше программы достаточно выполнить в консоли следующую команду::

    gcc example-g01n01.c -o example -lakrypt-base -lakrypt

Имя компилятора, очевидно, может быть заменено на любое другое: ``clang``,
``tcc``, ``cl`` и т.п.


Как скомпилировать сразу все примеры
------------------------------------

Существует простой способ автоматизированной сборки всех примеров,
приведенных в этом и последующих разделах инструкции.

.. note::


  Исходные тексты всех примеров находятся в каталоге `examples/faq` дерева
  библиотеки. Каждый пример имеет вид ``example-gXXnYY.c``,
  где ``XX`` это номер группы примеров, а ``YY`` номер самого примера.


Для добавления автоматизированной компиляции примеров, на этапе сборки библиотеки,
необходимо выполнить команду ``cmake`` со следующими аргументами::

    cmake -DAK_EXAPMLES=ON ../libakrypt-0.x

Отметим, что детальное описание всех флагов команды ``cmake`` можно найти в
соответствующем `разделе <install-guide.html>`__ инструкции.


Соглашения по именам типов данных
---------------------------------

После подключения заголовочного файла ``libakrypt.h`` пользователю
становится доступным ряд новых типов данных,
ряд из которых приведен в следующей таблице.

.. csv-table:: Базовые типы данных
   :header: "Тип", "Размер", "Описание"
   :widths: 20, 20, 40

   "``ak_uint8``", 1 байт, беззнаковое целое
   "``ak_uint32``", 4 байта, беззнаковое целое (слово)
   "``ak_uint64``", 8 байт, беззнаковое целое (двойное слово)
   "``ak_uint128``", 16 байт, беззнаковое целое реализовано в виде структуры
   "``ak_pointer``", , указатель на область памяти
   "``ak_constpointer``", , неизменяемый указатель


Все остальные типы данных, которые вводятся библиотекой ``libakrypt``,
определяются одним из следующих способов:

1. Перечисления имеют постфикс `_t`, например, определение
   булевого типа вводится следующим стандартным способом.

.. code:: c

  /*! \brief Определение булева типа, принимающего значения либо истина, либо ложь. */
   typedef enum {
   /*! \brief Ложь */
    ak_false,
   /*! \brief Истина */
    ak_true
   } bool_t;


.. note::

  Несмотря на то, что булев тип ``_Bool`` поддерживается в языке Си начиная
  со стандарта [ISOIEC.9899-1999]_ , многие компиляторы, например `msvc`, долгое время не поддерживали его.
  Поэтому, указанное перечисление было введено для возможности сборки библиотеки на
  старых версиях компиляторов.

2. Структуры определяются согласно правилам языка Си, а
   указатели на структуры имеют префикc `ak_`, например,

.. code:: c

  typedef struct skey {
    /* здесь определение полей структуры */
  } *ak_skey;





